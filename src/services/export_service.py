import pandas as pd
from typing import List
from datetime import datetime
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload, joinedload
from src.database.models import Task, Submission, User, TaskAssignment
from src.database.models.task import TaskStatus, SubmissionStatus
import logging

class ExportService:
    def __init__(self, session: AsyncSession):
        self.session = session

    def _get_readable_task_status(self, status: str) -> str:
        status_map = {
            TaskStatus.NEW: '–ù–æ–≤–æ–µ',
            TaskStatus.IN_PROGRESS: '–í —Ä–∞–±–æ—Ç–µ',
            TaskStatus.COMPLETED: '–ó–∞–≤–µ—Ä—à–µ–Ω–æ',
            TaskStatus.EXPIRED: '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–æ',
            TaskStatus.CANCELLED: '–û—Ç–º–µ–Ω–µ–Ω–æ'
        }
        return status_map.get(status, status)

    def _get_readable_submission_status(self, status: str) -> str:
        status_map = {
            'pending': '–ù–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
            'approved': '–û–¥–æ–±—Ä–µ–Ω–æ',
            'revision': '–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ',
            'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω–æ'
        }
        return status_map.get(status, status)

    async def export_task_report(self, task_id: int) -> str:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
            result = await self.session.execute(
                select(Task).where(Task.id == task_id)
            )
            task = result.scalar_one()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–µ–π
            assignments_result = await self.session.execute(
                select(TaskAssignment).where(TaskAssignment.task_id == task_id)
            )
            assignments = assignments_result.scalars().all()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            result = await self.session.execute(
                select(Submission)
                .options(joinedload(Submission.user))  # –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                .where(Submission.task_id == task_id)
            )
            submissions = result.scalars().all()
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è Excel
            submissions_data = []
            for submission in submissions:
                submissions_data.append({
                    'ID –ø—É–±–ª–∏–∫–∞—Ü–∏–∏': submission.id,
                    '–°–ú–ò': submission.user.media_outlet,
                    '–°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏': self._get_readable_submission_status(submission.status),
                    '–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏': submission.submitted_at.strftime('%d.%m.%Y %H:%M'),
                    '–¢–µ–∫—Å—Ç': submission.content,
                    '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π': submission.revision_comment,
                    '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é': submission.published_link
                })
            
            # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –°–ú–ò
            assignments_data = []
            for assignment in assignments:
                assignments_data.append({
                    '–°–ú–ò': assignment.media_outlet,
                    '–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' if assignment.status == 'completed' else 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
                    '–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è': assignment.assigned_at.strftime('%d.%m.%Y %H:%M')
                })
            
            # –°–æ–∑–¥–∞–µ–º DataFrame
            submissions_df = pd.DataFrame(submissions_data)
            assignments_df = pd.DataFrame(assignments_data)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
            task_info = pd.DataFrame([{
                'ID –∑–∞–¥–∞–Ω–∏—è': task.id,
                '–ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑': task.press_release_link,
                '–î–µ–¥–ª–∞–π–Ω': task.deadline.strftime('%d.%m.%Y %H:%M'),
                '–°—Ç–∞—Ç—É—Å': self._get_readable_task_status(task.status),
                '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': task.created_at.strftime('%d.%m.%Y %H:%M')
            }])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"task_{task_id}_report_{timestamp}.xlsx"
            
            # –°–æ–∑–¥–∞–µ–º Excel writer
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                task_info.to_excel(writer, sheet_name='–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏', index=False)
                assignments_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç—É—Å—ã –ø–æ –°–ú–ò', index=False)
                if not submissions_data:
                    pd.DataFrame({'–°—Ç–∞—Ç—É—Å': ['–ù–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π']}).to_excel(writer, sheet_name='–ü—É–±–ª–∏–∫–∞—Ü–∏–∏', index=False)
                else:
                    submissions_df.to_excel(writer, sheet_name='–ü—É–±–ª–∏–∫–∞—Ü–∏–∏', index=False)
            
            logging.info(f"Report created: {filename}")
            logging.info(f"Task info: {task_info.to_dict()}")
            logging.info(f"Submissions data: {submissions_data}")
            
            return filename
            
        except Exception as e:
            logging.error(f"Error creating report: {e}", exc_info=True)
            raise

    async def export_all_tasks_report(self) -> str:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
            tasks_result = await self.session.execute(
                select(Task).order_by(Task.created_at.desc())
            )
            tasks = tasks_result.scalars().all()
            
            all_submissions_data = []
            all_assignments_data = []
            all_tasks_data = []
            
            for task in tasks:
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞–Ω–∏–∏
                all_tasks_data.append({
                    'ID –∑–∞–¥–∞–Ω–∏—è': task.id,
                    '–ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑': task.press_release_link,
                    '–î–µ–¥–ª–∞–π–Ω': task.deadline.strftime('%d.%m.%Y %H:%M'),
                    '–°—Ç–∞—Ç—É—Å': self._get_readable_task_status(task.status),
                    '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è': task.created_at.strftime('%d.%m.%Y %H:%M')
                })
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                assignments_result = await self.session.execute(
                    select(TaskAssignment, User)
                    .select_from(TaskAssignment)
                    .join(
                        Submission,
                        (Submission.task_id == TaskAssignment.task_id) &
                        (Submission.user_id == User.id)
                    )
                    .join(
                        User,
                        User.media_outlet == TaskAssignment.media_outlet
                    )
                    .where(TaskAssignment.task_id == task.id)
                    .group_by(TaskAssignment.id, User.id)
                )
                assignments = assignments_result.all()
                
                for assignment, user in assignments:
                    all_assignments_data.append({
                        'ID –∑–∞–¥–∞–Ω–∏—è': task.id,
                        '–°–ú–ò': assignment.media_outlet,
                        'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': user.telegram_id,
                        '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è': user.username,
                        '–°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è': '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' if assignment.status == 'completed' else 'üîÑ –í —Ä–∞–±–æ—Ç–µ',
                        '–î–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è': assignment.assigned_at.strftime('%d.%m.%Y %H:%M')
                    })
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
                submissions_result = await self.session.execute(
                    select(Submission)
                    .options(joinedload(Submission.user))
                    .where(Submission.task_id == task.id)
                )
                submissions = submissions_result.scalars().all()
                
                for submission in submissions:
                    all_submissions_data.append({
                        'ID –∑–∞–¥–∞–Ω–∏—è': task.id,
                        'ID –ø—É–±–ª–∏–∫–∞—Ü–∏–∏': submission.id,
                        '–°–ú–ò': submission.user.media_outlet,
                        '–°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏': self._get_readable_submission_status(submission.status),
                        '–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏': submission.submitted_at.strftime('%d.%m.%Y %H:%M'),
                        '–¢–µ–∫—Å—Ç': submission.content,
                        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ—Ä–∞–±–æ—Ç–∫–µ': submission.revision_comment or '',
                        '–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é': submission.published_link or ''
                    })
            
            # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö
            tasks_df = pd.DataFrame(all_tasks_data)
            assignments_df = pd.DataFrame(all_assignments_data)
            submissions_df = pd.DataFrame(all_submissions_data)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"all_tasks_report_{timestamp}.xlsx"
            
            # –°–æ–∑–¥–∞–µ–º Excel writer
            with pd.ExcelWriter(filename, engine='openpyxl') as writer:
                tasks_df.to_excel(writer, sheet_name='–ó–∞–¥–∞–Ω–∏—è', index=False)
                assignments_df.to_excel(writer, sheet_name='–ù–∞–∑–Ω–∞—á–µ–Ω–∏—è', index=False)
                if not all_submissions_data:
                    pd.DataFrame({'–°—Ç–∞—Ç—É—Å': ['–ù–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π']}).to_excel(writer, sheet_name='–ü—É–±–ª–∏–∫–∞—Ü–∏–∏', index=False)
                else:
                    submissions_df.to_excel(writer, sheet_name='–ü—É–±–ª–∏–∫–∞—Ü–∏–∏', index=False)
            
            logging.info(f"Report created: {filename}")
            return filename
            
        except Exception as e:
            logging.error(f"Error creating report: {e}", exc_info=True)
            raise

    async def export_submissions_to_excel(self, task_id: int) -> str:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
            query = (
                select(Submission)
                .options(joinedload(Submission.user))
                .where(Submission.task_id == task_id)
            )
            result = await self.session.execute(query)
            submissions = result.scalars().all()

            if not submissions:
                raise ValueError("No submissions found for the task")

            # –°–æ–∑–¥–∞–µ–º DataFrame
            data = []
            for submission in submissions:
                data.append({
                    "ID": submission.id,
                    "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å": submission.user.username,
                    "–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ": submission.content,
                    "–°—Ç–∞—Ç—É—Å": submission.status,
                    "–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏": submission.submitted_at.strftime("%Y-%m-%d %H:%M:%S"),
                    "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –¥–æ—Ä–∞–±–æ—Ç–∫–µ": submission.revision_comment,
                    "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é": submission.published_link
                })

            df = pd.DataFrame(data)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel
            filename = f"submissions_task_{task_id}.xlsx"
            df.to_excel(filename, index=False)

            return filename

        except Exception as e:
            logging.error(f"Error exporting submissions to Excel: {e}")
            raise