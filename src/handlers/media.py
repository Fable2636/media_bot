from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from src.states.task_states import TaskStates
from src.services.task_service import TaskService
from src.services.submission_service import SubmissionService
from src.keyboards.media_kb import get_media_main_keyboard, get_task_keyboard
from src.keyboards.moderation_kb import get_moderation_keyboard
from src.utils.logger import logger
from src.database.models import User, Submission
from src.database.models.submission import SubmissionStatus
from sqlalchemy.ext.asyncio import AsyncSession
import logging
from aiogram.exceptions import TelegramBadRequest
import re
from sqlalchemy import select

router = Router()

@router.callback_query(F.data == "active_tasks")
async def show_active_tasks(
    callback: CallbackQuery, 
    session: AsyncSession,
    user: User,
    bot: Bot
):
    try:
        task_service = TaskService(session)
        tasks = await task_service.get_active_tasks()
        
        logging.info(f"Received {len(tasks)} tasks")
        
        if not tasks:
            await callback.message.edit_text(
                "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π",
                reply_markup=get_media_main_keyboard()
            )
            await callback.answer()
            return
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏
        await callback.message.delete()
        
        for task in tasks:
            logging.info(f"Processing task {task.id}, photo={task.photo}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∑—è—Ç–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            assignment = await task_service.get_task_assignment(task.id, user.media_outlet)
            
            if assignment:
                # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤–∑—è—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç"
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
                        callback_data=f"submit_task_{task.id}"
                    )
                ]])
            else:
                # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤–∑—è—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                        callback_data=f"take_task_{task.id}"
                    )
                ]])
            
            if task.photo:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                try:
                    logging.info(f"Attempting to send photo for task {task.id}")
                    await bot.send_photo(
                        chat_id=callback.message.chat.id,
                        photo=task.photo,
                        caption=(
                            f"–ó–∞–¥–∞–Ω–∏–µ #{task.id}\n"
                            f"–ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑: {task.press_release_link[:300] + '...' if len(task.press_release_link) > 300 else task.press_release_link}\n"
                            f"–î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y %H:%M')}"
                        ),
                        reply_markup=keyboard
                    )
                    logging.info(f"Successfully sent photo for task {task.id}")
                except Exception as e:
                    logging.error(f"Error sending photo for task {task.id}: {str(e)}", exc_info=True)
                    await callback.message.answer(
                        f"–ó–∞–¥–∞–Ω–∏–µ #{task.id}\n"
                        f"–ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑: {task.press_release_link[:300] + '...' if len(task.press_release_link) > 300 else task.press_release_link}\n"
                        f"–î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y %H:%M')}",
                        reply_markup=keyboard
                    )
            else:  # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                await callback.message.answer(
                    f"–ó–∞–¥–∞–Ω–∏–µ #{task.id}\n"
                    f"–ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑: {task.press_release_link[:300] + '...' if len(task.press_release_link) > 300 else task.press_release_link}\n"
                    f"–î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y %H:%M')}",
                    reply_markup=keyboard
                )
        
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error in show_active_tasks: {str(e)}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π")

@router.callback_query(F.data.startswith("take_task_"))
async def take_task(
    callback: CallbackQuery, 
    session: AsyncSession,
    user: User,
    bot: Bot
):
    try:
        task_id = int(callback.data.split("_")[-1])
        
        task_service = TaskService(session)
        task = await task_service.get_task_by_id(task_id)
        
        if not task:
            await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–∑—è—Ç–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º —ç—Ç–æ–≥–æ –°–ú–ò
        existing_assignment = await task_service.get_task_assignment(task_id, user.media_outlet)
        if existing_assignment:
            await callback.answer("–ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤–∑—è—Ç–æ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –≤–∞—à–µ–≥–æ –°–ú–ò")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç —ç—Ç–æ–≥–æ –°–ú–ò
        has_completed_submission = await task_service.check_media_outlet_submission(task_id, user.media_outlet)
        if has_completed_submission:
            await callback.answer("–í–∞—à–µ –°–ú–ò —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ")
            return
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
        assignment = await task_service.assign_task(task_id, user.media_outlet)
        
        if not assignment:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–∑—è—Ç—å –∑–∞–¥–∞–Ω–∏–µ. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–ª–∏ –≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç"
        await bot.send_message(
            user.telegram_id,
            f"‚úÖ –í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞–Ω–∏–µ #{task_id} –≤ —Ä–∞–±–æ—Ç—É\n"
            f"–ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑: {task.press_release_link[:300] + '...' if len(task.press_release_link) > 300 else task.press_release_link}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y %H:%M')}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
                    callback_data=f"submit_task_{task_id}"
                )
            ]])
        )
        
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É")
        
    except Exception as e:
        logging.error(f"Error in take_task: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ –∑–∞–¥–∞–Ω–∏—è")

@router.callback_query(F.data == "my_submissions")
async def show_user_submissions(
    callback: CallbackQuery, 
    session: AsyncSession,
    user: User
):
    submission_service = SubmissionService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    active_submissions = await submission_service.get_user_submissions(user.id, active_only=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    archive_submissions = await submission_service.get_user_submissions(user.id, active_only=False)
    
    if not active_submissions and not archive_submissions:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if active_submissions:
        await callback.message.answer("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
        for submission in active_submissions:
            await show_submission_details(callback.message, submission)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ö–∏–≤–∞
    if archive_submissions:
        await callback.message.answer(
            "–ï—Å—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤",
                    callback_data="show_archive"
                )
            ]])
        )
    
    await callback.answer()

@router.message(Command("start"))
async def cmd_start(message: Message, user):
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏!",
        reply_markup=get_media_main_keyboard()
    )

@router.callback_query(F.data.startswith("submit_task_"))
async def handle_submit_task(
    callback: CallbackQuery, 
    state: FSMContext,
    user: User,
    session: AsyncSession
):
    try:
        task_id = int(callback.data.split("_")[-1])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∑—è—Ç–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        task_service = TaskService(session)
        assignment = await task_service.get_task_assignment(task_id, user.media_outlet)
        
        if not assignment:
            await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è", show_alert=True)
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        await state.set_state(TaskStates.waiting_for_text)
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞ –∏ —É–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        await state.set_data({
            'task_id': task_id,
            'can_send_text': True,
            'is_blocked': False
        })
        
        await callback.message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error in handle_submit_task: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

@router.callback_query(F.data.startswith("submit_revision_"))
async def handle_revision_request(
    callback: CallbackQuery, 
    state: FSMContext,
    session: AsyncSession
):
    try:
        submission_id = int(callback.data.split("_")[2])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        submission_service = SubmissionService(session)
        submission = await submission_service.get_submission(submission_id)
        
        if not submission:
            await callback.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏
        is_photo_revision = submission.previous_status == SubmissionStatus.TEXT_APPROVED.value
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º submission_id –∏ task_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            submission_id=submission_id,
            task_id=submission.task_id,  # –í–∞–∂–Ω–æ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º task_id –∏–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            is_photo_revision=is_photo_revision,
            can_send_text=True,  # –°—Ä–∞–∑—É —Ä–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞
            is_blocked=False  # –£–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        )
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if is_photo_revision:
            await state.set_state(TaskStates.waiting_for_photo)
            await callback.message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ.")
        else:
            await state.set_state(TaskStates.waiting_for_text)
            await callback.message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
            
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error in handle_revision_request: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

@router.message(TaskStates.waiting_for_text)
async def handle_submission_text(
    message: Message, 
    state: FSMContext, 
    session: AsyncSession,
    user: User,
    bot: Bot
):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫–Ω–æ–ø–∫–µ
        data = await state.get_data()
        submission_id = data.get('submission_id')
        task_id = data.get('task_id')
        
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        if data.get('is_blocked') or not data.get('can_send_text', False):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
                    callback_data=f"send_text_{submission_id}" if submission_id else "send_text"
                )
            ]])
            await message.answer(
                "‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=keyboard
            )
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await state.set_data({
                'task_id': task_id,
                'submission_id': submission_id,
                'can_send_text': False,
                'is_blocked': True
            })
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞
        if len(message.text) > 3500:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
                    callback_data=f"send_text_{submission_id}" if submission_id else "send_text"
                )
            ]])
            await message.answer(
                "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 3500 —Å–∏–º–≤–æ–ª–æ–≤.",
                reply_markup=keyboard
            )
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await state.set_data({
                'task_id': task_id,
                'submission_id': submission_id,
                'can_send_text': False,
                'is_blocked': True
            })
            return
        
        submission_service = SubmissionService(session)
        
        if submission_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            submission = await submission_service.get_submission(submission_id)
            if not submission:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
                        callback_data=f"send_text_{submission_id}"
                    )
                ]])
                await message.answer(
                    "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                    reply_markup=keyboard
                )
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await state.set_data({
                    'task_id': task_id,
                    'submission_id': submission_id,
                    'can_send_text': False,
                    'is_blocked': True
                })
                return
                
            if submission.status != SubmissionStatus.REVISION.value:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
                        callback_data=f"send_text_{submission_id}"
                    )
                ]])
                await message.answer(
                    "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ.",
                    reply_markup=keyboard
                )
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await state.set_data({
                    'task_id': task_id,
                    'submission_id': submission_id,
                    'can_send_text': False,
                    'is_blocked': True
                })
                return
                
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            submission = await submission_service.update_submission_content(
                submission_id=submission_id,
                content=message.text,
                photo=None  # –§–æ—Ç–æ –Ω–µ –º–µ–Ω—è–µ–º
            )
            action_text = "–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π "
            task_id = submission.task_id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º task_id –∏–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            submissions = await submission_service.get_user_submissions(user.id, active_only=True)
            existing_submission = next((s for s in submissions if s.task_id == task_id), None)
            
            if existing_submission:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
                        callback_data="send_text"
                    )
                ]])
                await message.answer(
                    "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.",
                    reply_markup=keyboard
                )
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                await state.set_data({
                    'task_id': task_id,
                    'submission_id': submission_id,
                    'can_send_text': False,
                    'is_blocked': True
                })
                return
                
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é
            if not task_id:
                logging.error("task_id is missing when creating submission")
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
                        callback_data="send_text"
                    )
                ]])
                await message.answer(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=keyboard
                )
                await state.set_data({
                    'can_send_text': False,
                    'is_blocked': True
                })
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
            task_service = TaskService(session)
            task = await task_service.get_task_by_id(task_id)
            
            if not task:
                logging.error(f"Task {task_id} not found when creating submission")
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
                        callback_data="send_text"
                    )
                ]])
                await message.answer(
                    "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=keyboard
                )
                await state.set_data({
                    'can_send_text': False,
                    'is_blocked': True
                })
                return

            logging.info(f"Creating submission with task_id {task_id} for task {task}")
            submission = await submission_service.create_submission(
                task_id=task_id,
                user_id=user.id,
                content=message.text,
                photo=None
            )
            
            if not submission or not submission.task:
                logging.error(f"Failed to create submission for task {task_id} or task not loaded")
                keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
                        callback_data="send_text"
                    )
                ]])
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    reply_markup=keyboard
                )
                await state.set_data({
                    'task_id': task_id,
                    'can_send_text': False,
                    'is_blocked': True
                })
                return
                
            action_text = "–Ω–æ–≤—ã–π "
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ —Ç–µ–∫—Å—Ç–µ
        from src.config.users import ADMINS
        for admin in ADMINS:
            try:
                notification_text = (
                    f"üì® {action_text}—Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è #{submission.task_id}\n"
                    f"–û—Ç: {user.media_outlet}\n"
                    f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.telegram_id}\n"
                    f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user.username}\n"
                    f"–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n{message.text}"
                )
                
                keyboard = await get_moderation_keyboard(submission.id)
                
                await bot.send_message(
                    admin["telegram_id"],
                    notification_text,
                    reply_markup=keyboard
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin['username']} (ID: {admin['telegram_id']}): {e}")
        
        await message.answer(
            f"‚úÖ {action_text}—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.",
            reply_markup=get_media_main_keyboard()
        )
        
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
        await state.clear()
        
    except Exception as e:
        logging.error(f"Error in handle_submission_text: {e}", exc_info=True)
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
                callback_data=f"send_text_{data.get('submission_id')}" if data.get('submission_id') else "send_text"
            )
        ]])
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=keyboard
        )
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        await state.set_data({
            'task_id': data.get('task_id'),
            'submission_id': data.get('submission_id'),
            'can_send_text': False,
            'is_blocked': True
        })

@router.callback_query(F.data.startswith("approve_submission_"))
async def approve_submission(callback: CallbackQuery, session: AsyncSession, bot: Bot):
    submission_id = int(callback.data.split("_")[-1])
    submission_service = SubmissionService(session)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        submission = await submission_service.get_submission_with_user(submission_id)
        logging.info(f"Processing approval for submission {submission_id}")
        logging.info(f"Initial status: {submission.status}, Has photo: {bool(submission.photo)}")
        
        # –û–¥–æ–±—Ä—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        submission = await submission_service.approve_submission(submission_id)
        logging.info(f"After approval status: {submission.status}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        message_text = callback.message.text or callback.message.caption
        if message_text:
            status_text = "‚úÖ –¢–µ–∫—Å—Ç –æ–¥–æ–±—Ä–µ–Ω" if submission.status == SubmissionStatus.TEXT_APPROVED.value else "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–¥–æ–±—Ä–µ–Ω–æ"
            message_text = message_text.split("\n–°—Ç–∞—Ç—É—Å:")[0] + f"\n–°—Ç–∞—Ç—É—Å: {status_text}"
            
            try:
                if callback.message.photo:
                    await callback.message.edit_caption(
                        caption=message_text,
                        reply_markup=callback.message.reply_markup
                    )
                else:
                    await callback.message.edit_text(
                        text=message_text,
                        reply_markup=callback.message.reply_markup
                    )
            except Exception as e:
                logging.error(f"Error updating admin message: {e}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ send_user_notification
        await send_user_notification(bot, submission)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback
        if submission.status == SubmissionStatus.TEXT_APPROVED.value:
            await callback.answer("–¢–µ–∫—Å—Ç –æ–¥–æ–±—Ä–µ–Ω. –û–∂–∏–¥–∞–µ–º —Ñ–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        elif submission.status == SubmissionStatus.APPROVED.value:
            await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–¥–æ–±—Ä–µ–Ω–æ.")
        
    except Exception as e:
        logging.error(f"Error approving submission: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")

@router.callback_query(F.data.startswith("attach_photo_"))
async def handle_attach_photo(callback: CallbackQuery, state: FSMContext):
    try:
        submission_id = int(callback.data.split("_")[-1])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            submission_id=submission_id,
            can_send_photo=False,  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –±–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ
            is_blocked=True
        )
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
        await state.set_state(TaskStates.waiting_for_photo)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
                callback_data="send_photo"
            )
        ]])
        
        await callback.message.answer(
            "‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error in handle_attach_photo: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

@router.callback_query(F.data == "send_photo")
async def prompt_for_photo(callback: CallbackQuery, state: FSMContext):
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_data = await state.get_data()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ä–∞–∑—Ä–µ—à–∞—è –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ
        await state.set_data({
            **current_data,
            'can_send_photo': True,
            'is_blocked': False
        })
        
        await callback.message.edit_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:",
            reply_markup=None
        )
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error in prompt_for_photo: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

@router.message(TaskStates.waiting_for_photo)
async def handle_photo_submission(
    message: Message, 
    state: FSMContext, 
    session: AsyncSession,
    bot: Bot
):
    try:
        data = await state.get_data()
        
        # –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
        if data.get('is_blocked') or not data.get('can_send_photo', False):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
                    callback_data="send_photo"
                )
            ]])
            await message.answer(
                "‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=keyboard
            )
            return
            
        if not message.photo:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
                    callback_data="send_photo"
                )
            ]])
            await message.answer(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –∞ –Ω–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.",
                reply_markup=keyboard
            )
            return

        submission_id = data.get('submission_id')
        
        if not submission_id:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
                    callback_data="send_photo"
                )
            ]])
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=keyboard
            )
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        submission_service = SubmissionService(session)
        submission = await submission_service.get_submission(submission_id)
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ç–æ –µ—Å–ª–∏:
        # 1. –ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫–µ (REVISION)
        # 2. –¢–µ–∫—Å—Ç —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω (TEXT_APPROVED)
        if not submission or (
            submission.status != SubmissionStatus.REVISION.value and 
            submission.status != SubmissionStatus.TEXT_APPROVED.value
        ):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ",
                    callback_data="send_photo"
                )
            ]])
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–¥–æ–±—Ä–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.",
                reply_markup=keyboard
            )
            await state.clear()
            return

        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª_id —Å–∞–º–æ–π –±–æ–ª—å—à–æ–π –≤–µ—Ä—Å–∏–∏ —Ñ–æ—Ç–æ
        photo = message.photo[-1].file_id
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        submission = await submission_service.update_submission_content(
            submission_id=submission_id,
            photo=photo
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –ø—É–±–ª–∏–∫–∞—Ü–∏—é —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        submission = await submission_service.get_submission_with_user(submission_id)
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–∞ (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤)
        text_preview = submission.content[:300]
        if len(submission.content) > 300:
            text_preview += "..."
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –Ω–æ–≤–æ–º —Ñ–æ—Ç–æ
        from src.config.users import ADMINS
        for admin in ADMINS:
            try:
                await bot.send_photo(
                    chat_id=admin["telegram_id"],
                    photo=photo,
                    caption=(
                        f"üì∏ {'–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ' if submission.status == SubmissionStatus.REVISION.value else '–ù–æ–≤–æ–µ'} —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–¥–∞–Ω–∏—è #{submission.task_id}\n"
                        f"–û—Ç: {submission.user.media_outlet}\n"
                        f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {submission.user.telegram_id}\n"
                        f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{submission.user.username}\n\n"
                        f"–¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:\n{text_preview}"
                    ),
                    reply_markup=await get_moderation_keyboard(submission.id)
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin['username']} (ID: {admin['telegram_id']}): {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_user_notification(bot, submission)
        
        await message.answer(
            "‚úÖ –§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫ –∑–∞–¥–∞–Ω–∏—é. –û–∂–∏–¥–∞–π—Ç–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è.",
            reply_markup=get_media_main_keyboard()
        )
        await state.clear()
        
    except Exception as e:
        logging.error(f"Error in handle_photo_submission: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–æ—Ç–æ",
            reply_markup=get_media_main_keyboard()
        )
        await state.clear()

@router.callback_query(F.data == "show_archive")
async def show_archive(
    callback: CallbackQuery, 
    session: AsyncSession,
    user: User
):
    submission_service = SubmissionService(session)
    archive_submissions = await submission_service.get_user_submissions(user.id, active_only=False)
    
    if not archive_submissions:
        await callback.answer("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç")
        return
    
    await callback.message.answer("–ê—Ä—Ö–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    for submission in archive_submissions:
        await show_submission_details(callback.message, submission)
    
    await callback.answer()

async def show_submission_details(message: Message, submission: Submission):
    status_text = {
        SubmissionStatus.PENDING.value: 'üïí –¢–µ–∫—Å—Ç –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
        SubmissionStatus.TEXT_APPROVED.value: '‚úÖ –¢–µ–∫—Å—Ç –æ–¥–æ–±—Ä–µ–Ω, –æ–∂–∏–¥–∞–µ—Ç—Å—è —Ñ–æ—Ç–æ',
        SubmissionStatus.PHOTO_PENDING.value: 'üïí –§–æ—Ç–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–µ',
        SubmissionStatus.APPROVED.value: '‚úÖ –ó–∞–¥–∞–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ',
        SubmissionStatus.REVISION.value: 'üìù –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏',
        SubmissionStatus.COMPLETED.value: '‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ'
    }.get(submission.status, submission.status)
    
    text = (
        f"–ó–∞–¥–∞–Ω–∏–µ #{submission.task_id}\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {submission.submitted_at.strftime('%d.%m.%Y %H:%M')}\n"
    )
    
    if submission.revision_comment:
        text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {submission.revision_comment}\n"
    
    if submission.published_link:
        text += f"–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é: {submission.published_link}\n"
    
    keyboard = None
    if submission.status == SubmissionStatus.REVISION.value:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –Ω—É–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ previous_status
        is_photo_revision = submission.previous_status == SubmissionStatus.TEXT_APPROVED.value
        if is_photo_revision:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ",
                    callback_data=f"submit_revision_{submission.id}"
                )
            ]])
        else:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
                    callback_data=f"submit_revision_{submission.id}"
                )
            ]])
    elif submission.status == SubmissionStatus.TEXT_APPROVED.value:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ",
                callback_data=f"attach_photo_{submission.id}"
            )
        ]])
    elif submission.status == SubmissionStatus.APPROVED.value:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(
                text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
                callback_data=f"send_link_{submission.id}"
            )
        ]])
    
    if submission.photo:
        await message.answer_photo(
            photo=submission.photo,
            caption=text,
            reply_markup=keyboard
        )
    else:
        await message.answer(text, reply_markup=keyboard)

@router.message(F.text == "–ê—Ä—Ö–∏–≤")
async def handle_archive_button(
    message: Message, 
    session: AsyncSession,
    user: User
):
    submission_service = SubmissionService(session)
    archive_submissions = await submission_service.get_user_submissions(user.id, active_only=False)
    
    if not archive_submissions:
        await message.answer("–ê—Ä—Ö–∏–≤ –ø—É—Å—Ç")
        return
    
    await message.answer("–ê—Ä—Ö–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
    for submission in archive_submissions:
        await show_submission_details(message, submission)

@router.callback_query(F.data.startswith("send_link_"))
async def handle_send_link_button(callback: CallbackQuery, state: FSMContext):
    submission_id = int(callback.data.split("_")[-1])
    await state.update_data(submission_id=submission_id)
    await state.set_state(TaskStates.waiting_for_link)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
        InlineKeyboardButton(
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
            callback_data="send_text"
        )
    ]])
    await callback.message.answer(
        "‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )
    await callback.answer()

@router.message(TaskStates.waiting_for_link)
async def handle_link_submission(
    message: Message, 
    state: FSMContext, 
    session: AsyncSession,
    bot: Bot
):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫–Ω–æ–ø–∫–µ
        data = await state.get_data()
        if not data.get('can_send_text', False):  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º False –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
                    callback_data="send_text"
                )
            ]])
            await message.answer(
                "‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=keyboard
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            await state.set_data({
                'submission_id': data.get('submission_id'),
                'can_send_text': False
            })
            return  # –í–∞–∂–Ω–æ: —Ä–∞–Ω–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Å—Å—ã–ª–∫–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞
        if len(message.text) > 3500:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
                    callback_data="send_text"
                )
            ]])
            await message.answer(
                "‚ùå –°—Å—ã–ª–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 3500 —Å–∏–º–≤–æ–ª–æ–≤.",
                reply_markup=keyboard
            )
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ can_send_text
            await state.set_data({
                'submission_id': data.get('submission_id'),
                'can_send_text': False
            })
            return  # –í–∞–∂–Ω–æ: —Ä–∞–Ω–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
            
        data = await state.get_data()
        submission_id = data.get('submission_id')
        
        if not submission_id:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
                    callback_data="send_text"
                )
            ]])
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=keyboard
            )
            await state.clear()
            return
        
        submission_service = SubmissionService(session)
        submission = await submission_service.get_submission(submission_id)
        
        if not submission:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
                    callback_data="send_text"
                )
            ]])
            await message.answer(
                "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=keyboard
            )
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Å—Å—ã–ª–∫–∏ —É —ç—Ç–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        if submission.published_link:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
                    callback_data="send_text"
                )
            ]])
            await message.answer(
                "‚ùå –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å—Å—ã–ª–∫—É –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.",
                reply_markup=keyboard
            )
            await state.clear()
            return

        if submission.status != SubmissionStatus.APPROVED.value:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
                    callback_data="send_text"
                )
            ]])
            await message.answer(
                "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É, –ø–æ–∫–∞ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é.",
                reply_markup=keyboard
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É
        submission = await submission_service.add_published_link(
            submission_id=submission_id,
            published_link=message.text
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        from src.config.users import ADMINS
        for admin in ADMINS:
            try:
                await bot.send_message(
                    admin["telegram_id"],
                    f"‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞–Ω–∏–∏\n"
                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞–Ω–∏–µ #{submission.task_id}:\n"
                    f"{message.text}"
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin['username']}: {e}")
        
        await message.answer(
            "‚úÖ –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!",
            reply_markup=get_media_main_keyboard()
        )
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.set_data({
            'submission_id': submission.id,
            'can_send_text': False
        })
        
    except Exception as e:
        logging.error(f"Error in handle_link_submission: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏",
            reply_markup=get_media_main_keyboard()
        )
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await state.set_data({
            'submission_id': data.get('submission_id'),
            'can_send_text': False
        })

async def send_user_notification(bot: Bot, submission: Submission):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ —Å—Ç–∞—Ç—É—Å–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    try:
        if not submission.user or not submission.user.telegram_id:
            logging.error(f"No user or telegram_id found for submission {submission.id}")
            return
            
        if submission.status == SubmissionStatus.TEXT_APPROVED.value:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–æ–±—Ä–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Ñ–æ—Ç–æ
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ",
                    callback_data=f"attach_photo_{submission.id}"
                )
            ]])
            await bot.send_message(
                chat_id=submission.user.telegram_id,
                text=f"‚úÖ –í–∞—à —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è #{submission.task_id} –æ–¥–æ–±—Ä–µ–Ω!\n–¢–µ–ø–µ—Ä—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
                reply_markup=keyboard
            )
        elif submission.status == SubmissionStatus.APPROVED.value:
            # –ï—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–¥–æ–±—Ä–µ–Ω–∞
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="üîó –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
                    callback_data=f"send_link_{submission.id}"
                )
            ]])
            await bot.send_message(
                chat_id=submission.user.telegram_id,
                text=f"‚úÖ –í–∞—à–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è #{submission.task_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–¥–æ–±—Ä–µ–Ω–∞!\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª.",
                reply_markup=keyboard
            )
        elif submission.status == SubmissionStatus.COMPLETED.value:
            # –ï—Å–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞
            await bot.send_message(
                chat_id=submission.user.telegram_id,
                text=f"‚úÖ –í–∞—à–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –¥–ª—è –∑–∞–¥–∞–Ω–∏—è #{submission.task_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ.",
                reply_markup=get_media_main_keyboard()
            )
    except Exception as e:
        logging.error(f"Error in send_user_notification: {e}", exc_info=True)

@router.message(F.text == "–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è")
async def handle_active_tasks_button(
    message: Message, 
    session: AsyncSession,
    user: User,
    bot: Bot
):
    try:
        task_service = TaskService(session)
        tasks = await task_service.get_active_tasks(user.media_outlet)
        
        if not tasks:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π")
            return
            
        logging.info(f"Received {len(tasks)} tasks")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∑–∞–¥–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        for task in tasks:
            try:
                logging.info(f"Processing task {task.id}, photo={task.photo}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∑—è—Ç–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç—É
                assignment = await task_service.get_task_assignment(task.id, user.media_outlet)
                status_text = "‚úÖ –í —Ä–∞–±–æ—Ç–µ" if assignment else "üÜï –î–æ—Å—Ç—É–ø–Ω–æ"
                
                # –û–±—Ä–µ–∑–∞–µ–º —Å—Å—ã–ª–∫—É –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è
                press_release_link = task.press_release_link
                if len(press_release_link) > 300:
                    press_release_link = press_release_link[:297] + "..."
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∑–∞–¥–∞–Ω–∏—è
                task_text = (
                    f"–ó–∞–¥–∞–Ω–∏–µ #{task.id}\n"
                    f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
                    f"–î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y %H:%M')}\n"
                    f"–ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑: {press_release_link}"
                )
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
                keyboard = None
                if assignment:
                    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –≤ —Ä–∞–±–æ—Ç–µ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç"
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(
                            text="üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç",
                            callback_data=f"submit_task_{task.id}"
                        )
                    ]])
                else:
                    # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –≤–∑—è—Ç–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
                    keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(
                            text="‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                            callback_data=f"take_task_{task.id}"
                        )
                    ]])
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å —Ñ–æ—Ç–æ
                if task.photo:
                    await message.answer_photo(
                        photo=task.photo,
                        caption=task_text,
                        reply_markup=keyboard
                    )
                else:
                    # –ò–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                    await message.answer(
                        task_text,
                        reply_markup=keyboard
                    )
            except Exception as e:
                logging.error(f"Error processing task {task.id}: {e}", exc_info=True)
                continue  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–¥–∞–Ω–∏–µ–º –¥–∞–∂–µ –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—ã–∑–≤–∞–ª–æ –æ—à–∏–±–∫—É
                
    except Exception as e:
        logging.error(f"Error in show_active_tasks: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞–Ω–∏–π",
            reply_markup=get_media_main_keyboard()
        )

@router.message(F.text == "–ú–æ–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")
async def handle_my_submissions_button(
    message: Message, 
    session: AsyncSession,
    user: User
):
    submission_service = SubmissionService(session)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    active_submissions = await submission_service.get_user_submissions(user.id, active_only=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ö–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    archive_submissions = await submission_service.get_user_submissions(user.id, active_only=False)
    
    if not active_submissions and not archive_submissions:
        await message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if active_submissions:
        await message.answer("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:")
        for submission in active_submissions:
            await show_submission_details(message, submission)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞—Ä—Ö–∏–≤–∞
    if archive_submissions:
        await message.answer(
            "–ï—Å—Ç—å –∞—Ä—Ö–∏–≤–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–ü–æ–∫–∞–∑–∞—Ç—å –∞—Ä—Ö–∏–≤",
                    callback_data="show_archive"
                )
            ]])
        )

@router.callback_query(F.data.startswith("send_text_"))
async def prompt_for_text(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        # –ü–æ–ª—É—á–∞–µ–º submission_id –∏–∑ callback_data
        submission_id = int(callback.data.split("_")[-1])
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è task_id
        submission_service = SubmissionService(session)
        submission = await submission_service.get_submission(submission_id)
        
        if not submission:
            await callback.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        await state.set_state(TaskStates.waiting_for_text)
        
        # –†–∞–∑—Ä–µ—à–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ç–µ–∫—Å—Ç–∞ –∏ —É–±–∏—Ä–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        await state.set_data({
            'submission_id': submission_id,
            'task_id': submission.task_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º task_id –∏–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            'can_send_text': True,
            'is_blocked': False
        })
        
        await callback.message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error in prompt_for_text: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)

@router.message(TaskStates.waiting_for_revision)
async def handle_revision_comment(
    message: Message, 
    state: FSMContext, 
    session: AsyncSession,
    bot: Bot
):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –∫–Ω–æ–ø–∫–µ
        data = await state.get_data()
        if not data.get('can_send_text', False):  # –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º False –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    callback_data="send_text"
                )
            ]])
            await message.answer(
                "‚ùå –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=keyboard
            )
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            await state.set_data({
                'submission_id': data.get('submission_id'),
                'is_photo_revision': data.get('is_photo_revision'),
                'can_send_text': False
            })
            return  # –í–∞–∂–Ω–æ: —Ä–∞–Ω–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç, —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –¥–∞–ª—å–Ω–µ–π—à–µ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞
        if len(message.text) > 3500:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    callback_data="send_text"
                )
            ]])
            await message.answer(
                "‚ùå –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ - 3500 —Å–∏–º–≤–æ–ª–æ–≤.",
                reply_markup=keyboard
            )
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ can_send_text
            await state.set_data({
                'submission_id': data.get('submission_id'),
                'is_photo_revision': data.get('is_photo_revision'),
                'can_send_text': False
            })
            return  # –í–∞–∂–Ω–æ: —Ä–∞–Ω–Ω–∏–π –≤–æ–∑–≤—Ä–∞—Ç –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
            
        data = await state.get_data()
        submission_id = data.get('submission_id')
        is_photo_revision = data.get('is_photo_revision', False)
        
        if not submission_id:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
                    callback_data="send_text"
                )
            ]])
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=keyboard
            )
            await state.clear()
            return

        submission_service = SubmissionService(session)
        submission = await submission_service.get_submission(submission_id)
        
        if not submission:
            await message.answer(
                "‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                reply_markup=get_media_main_keyboard()
            )
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        submission = await submission_service.add_revision_comment(
            submission_id=submission_id,
            comment=message.text
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        from src.config.users import ADMINS
        for admin in ADMINS:
            try:
                await bot.send_message(
                    admin["telegram_id"],
                    f"üì® –î–æ–±–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–¥–∞–Ω–∏—é #{submission.task_id}\n"
                    f"–û—Ç: {submission.user.media_outlet}\n"
                    f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {submission.user.telegram_id}\n"
                    f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{submission.user.username}\n\n"
                    f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:\n{message.text}"
                )
            except Exception as e:
                logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin['username']}: {e}")
        
        await message.answer(
            "‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ!",
            reply_markup=get_media_main_keyboard()
        )
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Å–æ—Ö—Ä–∞–Ω—è—è —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        await state.set_data({
            'submission_id': submission.id,
            'is_photo_revision': data.get('is_photo_revision'),
            'can_send_text': False
        })
        
    except Exception as e:
        logging.error(f"Error in handle_revision_comment: {e}", exc_info=True)
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è",
            reply_markup=get_media_main_keyboard()
        )
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        await state.set_data({
            'submission_id': data.get('submission_id'),
            'is_photo_revision': data.get('is_photo_revision'),
            'can_send_text': False
        })

@router.callback_query(F.data == "send_text")
async def prompt_for_new_text(callback: CallbackQuery, state: FSMContext, session: AsyncSession):
    try:
        logging.info("Starting prompt_for_new_text handler")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        task_id = data.get('task_id')
        submission_id = data.get('submission_id')
        logging.info(f"Task ID from state: {task_id}, Submission ID: {submission_id}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å submission_id, –ø–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        if submission_id:
            submission_service = SubmissionService(session)
            submission = await submission_service.get_submission(submission_id)
            if submission:
                task_id = submission.task_id
                logging.info(f"Found submission {submission_id} with task_id {task_id}")
        
        # –ï—Å–ª–∏ task_id –≤—Å—ë –µ—â—ë –Ω–µ—Ç, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not task_id:
            message_text = callback.message.text or callback.message.caption
            logging.info(f"Message text: {message_text}")
            
            if message_text:
                task_patterns = [
                    r'–ó–∞–¥–∞–Ω–∏–µ #(\d+)',
                    r'–∑–∞–¥–∞–Ω–∏–µ #(\d+)',
                    r'–∑–∞–¥–∞–Ω–∏—è #(\d+)',
                    r'#(\d+)'
                ]
                
                for pattern in task_patterns:
                    task_match = re.search(pattern, message_text, re.IGNORECASE)
                    if task_match:
                        task_id = int(task_match.group(1))
                        logging.info(f"Found task_id {task_id} using pattern {pattern}")
                        break
        
        if not task_id:
            logging.error("Failed to extract task_id from any source")
            await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –∑–∞–¥–∞–Ω–∏—è", show_alert=True)
            return
            
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_query = select(User).where(User.telegram_id == callback.from_user.id)
        user_result = await session.execute(user_query)
        user = user_result.scalar_one_or_none()
        
        if not user:
            logging.error(f"User not found for telegram_id {callback.from_user.id}")
            await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        task_service = TaskService(session)
        task = await task_service.get_task_by_id(task_id)
        
        if not task:
            logging.error(f"Task {task_id} not found in database")
            await callback.answer("–û—à–∏–±–∫–∞: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö", show_alert=True)
            return
            
        logging.info(f"Found task in database: {task.id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∑—è—Ç–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —ç—Ç–∏–º –°–ú–ò
        assignment = await task_service.get_task_assignment(task_id, user.media_outlet)
        if not assignment and not submission_id:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –µ—Å–ª–∏ —ç—Ç–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            logging.error(f"Media outlet {user.media_outlet} has not taken task {task_id}")
            await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è. –°–Ω–∞—á–∞–ª–∞ –≤–æ–∑—å–º–∏—Ç–µ –µ–≥–æ –≤ —Ä–∞–±–æ—Ç—É.", show_alert=True)
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        await state.set_state(TaskStates.waiting_for_text)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        state_data = {
            'task_id': task_id,
            'submission_id': submission_id,  # –°–æ—Ö—Ä–∞–Ω—è–µ–º submission_id –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            'can_send_text': True,
            'is_blocked': False
        }
        await state.set_data(state_data)
        logging.info(f"State data set: {state_data}")
        
        await callback.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è:")
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error in prompt_for_new_text: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
