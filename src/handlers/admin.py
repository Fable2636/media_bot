from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import BaseFilter
from datetime import datetime
from sqlalchemy.ext.asyncio import AsyncSession
from src.states.task_states import TaskStates, AdminStates
from src.services.task_service import TaskService
from src.services.submission_service import SubmissionService
from src.services.export_service import ExportService
from src.services.user_service import UserService
from src.keyboards.admin_kb import get_admin_main_keyboard, get_moderation_keyboard
from src.keyboards.moderation_kb import get_moderation_keyboard
from src.utils.logger import logger
from src.database.models import User, Task
import logging
from typing import List

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router(name='admin')

async def check_admin(user: User) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    is_admin = int(user.is_admin) == 1
    logging.info(f"Admin check for user {user.telegram_id}:")
    logging.info(f"  is_admin value: {user.is_admin} (type: {type(user.is_admin)})")
    logging.info(f"  check result: {is_admin}")
    return is_admin

@router.callback_query(F.data == "export_reports")
async def export_reports(callback: CallbackQuery, session: AsyncSession):
    try:
        logging.info(f"Admin {callback.from_user.id} called export_reports")
        logging.info(f"Callback data: {callback.data}")
        
        export_service = ExportService(session)
        filename = await export_service.export_all_tasks_report()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        await callback.message.answer_document(
            FSInputFile(filename),
            caption="–û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∑–∞–¥–∞–Ω–∏—è–º"
        )
        await callback.answer()
        
    except Exception as e:
        logging.error(f"Error in export_reports: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞", show_alert=True)

@router.callback_query(F.data == "create_task")
async def create_task(callback: CallbackQuery, state: FSMContext, user: User):
    if not await check_admin(user):
        logging.warning(f"Non-admin user {user.telegram_id} tried to access admin function")
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    logging.info(f"Admin {user.telegram_id} called create_task")
    await state.set_state(TaskStates.waiting_for_press_release)
    await callback.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑:")
    await callback.answer()

@router.message(TaskStates.waiting_for_press_release)
async def handle_press_release(message: Message, state: FSMContext):
    await state.update_data(press_release_link=message.text)
    await state.set_state(TaskStates.waiting_for_photo)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")

@router.message(TaskStates.waiting_for_photo)
async def handle_photo(message: Message, state: FSMContext):
    photo = None
    if message.photo:
        photo = message.photo[-1].file_id
        logging.info(f"Photo received: {photo}")
    else:
        logging.info("No photo received")
    
    await state.update_data(photo=photo)
    await state.set_state(TaskStates.waiting_for_deadline)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú:")

@router.message(TaskStates.waiting_for_deadline)
async def handle_deadline(
    message: Message, 
    state: FSMContext, 
    session: AsyncSession,
    user: User,
    bot: Bot
):
    try:
        data = await state.get_data()
        press_release_link = data['press_release_link']
        photo = data.get('photo')
        logging.info(f"Creating task with photo: {photo}")
        
        # –ü–∞—Ä—Å–∏–º –¥–µ–¥–ª–∞–π–Ω
        deadline = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        task_service = TaskService(session)
        task = await task_service.create_task(
            press_release_link=press_release_link,
            deadline=deadline,
            created_by=user.id,
            photo=photo  # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–æ—Ç–æ –≤ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –°–ú–ò –æ –Ω–æ–≤–æ–º –∑–∞–¥–∞–Ω–∏–∏
        user_service = UserService(session)
        media_users = await user_service.get_all_media_outlets()
        
        notification_sent = 0  # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        for media_user in media_users:
            try:
                if task.photo:  # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
                    await bot.send_photo(
                        chat_id=media_user.telegram_id,
                        photo=task.photo,
                        caption=(
                            f"üì£ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ #{task.id}\n"
                            f"–ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑: {task.press_release_link}\n"
                            f"–î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y %H:%M')}"
                        ),
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(
                                text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                                callback_data=f"take_task_{task.id}"
                            )
                        ]])
                    )
                else:  # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                    await bot.send_message(
                        chat_id=media_user.telegram_id,
                        text=(
                            f"üì£ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ #{task.id}\n"
                            f"–ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑: {task.press_release_link}\n"
                            f"–î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y %H:%M')}"
                        ),
                        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                            InlineKeyboardButton(
                                text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                                callback_data=f"take_task_{task.id}"
                            )
                        ]])
                    )
                notification_sent += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {media_user.username} (ID: {media_user.telegram_id}): {e}")
        
        await message.answer(
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task.id} —Å–æ–∑–¥–∞–Ω–æ\n"
            f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã: {notification_sent} –∏–∑ {len(media_users)} –°–ú–ò",
            reply_markup=get_admin_main_keyboard()
        )
        await state.clear()
        
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")
    except Exception as e:
        logging.error(f"Error in handle_deadline: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")
        await state.clear()

@router.callback_query(F.data == "review_posts")
async def review_posts(callback: CallbackQuery, session: AsyncSession):
    submission_service = SubmissionService(session)
    submissions = await submission_service.get_pending_submissions()
    
    if not submissions:
        await callback.message.answer("–ù–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
        return
    
    for submission in submissions:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        text = (
            f"üì® –ü—É–±–ª–∏–∫–∞—Ü–∏—è #{submission.id}\n"
            f"–û—Ç: {submission.user.media_outlet}\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {submission.user.telegram_id}\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{submission.user.username}\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: #{submission.task_id}\n"
            f"–¢–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n{submission.content}\n"
            f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {submission.submitted_at.strftime('%d.%m.%Y %H:%M')}"
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        if submission.photo:
            await callback.message.answer_photo(
                photo=submission.photo,
                caption=text,
                reply_markup=await get_moderation_keyboard(submission.id, session)
            )
        else:
            await callback.message.answer(
                text,
                reply_markup=await get_moderation_keyboard(submission.id, session)
            )
    
    await callback.answer()

@router.callback_query(F.data.startswith("approve_submission_"))
async def approve_submission(callback: CallbackQuery, session: AsyncSession):
    submission_id = int(callback.data.split("_")[-1])
    submission_service = SubmissionService(session)

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        submission = await submission_service.get_submission(submission_id)
        if not submission:
            await callback.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–¥–æ–±—Ä–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ
        if submission.status == 'approved':
            await callback.answer("–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —É–∂–µ –æ–¥–æ–±—Ä–µ–Ω–æ.", show_alert=True)
            return

        # –û–¥–æ–±—Ä—è–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        submission = await submission_service.approve_submission(submission_id)
        logging.info(f"Submission {submission_id} approved successfully")

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        if callback.message.text:
            message_text = callback.message.text + "\n\n–°—Ç–∞—Ç—É—Å: –û–¥–æ–±—Ä–µ–Ω–æ ‚úÖ"
            await callback.message.edit_text(
                message_text,
                reply_markup=callback.message.reply_markup
            )
        elif callback.message.caption:
            message_text = callback.message.caption + "\n\n–°—Ç–∞—Ç—É—Å: –û–¥–æ–±—Ä–µ–Ω–æ ‚úÖ"
            await callback.message.edit_caption(
                message_text,
                reply_markup=callback.message.reply_markup
            )
        else:
            message_text = f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è #{submission.id} –æ–¥–æ–±—Ä–µ–Ω–∞ ‚úÖ"
            await callback.message.edit_text(
                message_text,
                reply_markup=callback.message.reply_markup
            )

        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await session.get(User, submission.user_id)
        if user:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–Ω–æ–ø–∫–æ–π
            await callback.bot.send_message(
                chat_id=user.telegram_id,
                text=f"üéâ –í–∞—à–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è #{submission.id} –±—ã–ª–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É",
                        callback_data=f"send_link_{submission.id}"
                    )
                ]])
            )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –∫–∞–∫ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer("‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–æ")
        await callback.answer()

    except Exception as e:
        logging.error(f"Error approving submission: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–¥–æ–±—Ä–µ–Ω–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏")

@router.callback_query(F.data.startswith("revise_"))
async def revise_submission(
    callback: CallbackQuery, 
    state: FSMContext,
    session: AsyncSession
):
    submission_id = int(callback.data.split("_")[-1])
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    submission_service = SubmissionService(session)
    submission = await submission_service.get_submission(submission_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
    if submission.status == "approved":
        await callback.answer("–û–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–µ–ª—å–∑—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(submission_id=submission_id)
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await state.set_state(TaskStates.waiting_for_revision)
    
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –¥–æ—Ä–∞–±–æ—Ç–∫–∏:")
    await callback.answer()

@router.message(TaskStates.waiting_for_revision)
async def handle_revision_comment(
    message: Message, 
    state: FSMContext, 
    session: AsyncSession,
    bot: Bot
):
    data = await state.get_data()
    submission_id = data['submission_id']
    
    submission_service = SubmissionService(session)
    submission = await submission_service.request_revision(submission_id, message.text)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    user = await session.get(User, submission.user_id)
    
    if user:
        try:
            await bot.send_message(
                user.telegram_id,
                f"üìù –í–∞—à–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—è #{submission.id} —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏\n"
                f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}\n\n",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(
                        text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç",
                        callback_data=f"submit_revision_{submission.id}"
                    )
                ]])
            )
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} (ID: {user.telegram_id}): {e}")
    
    await message.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É")
    await state.clear()

@router.message(Command("create"))
async def cmd_create(message: Message, state: FSMContext, user: User):
    if not await check_admin(user):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    await state.set_state(TaskStates.waiting_for_press_release)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑:")

@router.message(Command("review"))
async def cmd_review(message: Message, session: AsyncSession, user: User):
    if not await check_admin(user):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    submission_service = SubmissionService(session)
    submissions = await submission_service.get_pending_submissions()
    
    if not submissions:
        await message.answer("–ù–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é")
        return
    
    for submission in submissions:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        text = (
            f"üì® –ü—É–±–ª–∏–∫–∞—Ü–∏—è #{submission.id}\n"
            f"–û—Ç: {submission.user.media_outlet}\n"
            f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {submission.user.telegram_id}\n"
            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{submission.user.username}\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: #{submission.task_id}\n"
            f"–¢–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:\n{submission.content}\n"
            f"–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {submission.submitted_at.strftime('%d.%m.%Y %H:%M')}"
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        if submission.photo:
            await message.answer_photo(
                photo=submission.photo,
                caption=text,
                reply_markup=await get_moderation_keyboard(submission.id, session)
            )
        else:
            await message.answer(
                text,
                reply_markup=await get_moderation_keyboard(submission.id, session)
            )

@router.message(Command("export"))
async def cmd_export(message: Message, session: AsyncSession, user: User):
    if not await check_admin(user):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return

    try:
        export_service = ExportService(session)
        filename = await export_service.export_all_tasks_report()
        
        await message.answer_document(
            FSInputFile(filename),
            caption="–û—Ç—á–µ—Ç –ø–æ –≤—Å–µ–º –∑–∞–¥–∞–Ω–∏—è–º"
        )
        
    except Exception as e:
        logging.error(f"Error in export_reports: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")

@router.message(Command("admin"))
async def handle_admin_command(message: Message):
    try:
        await message.answer(
            "–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
            reply_markup=get_admin_main_keyboard()
        )
    except Exception as e:
        logging.error(f"Error in handle_admin_command: {e}", exc_info=True)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")

@router.callback_query(F.data.startswith("review_submission_"))
async def review_submission(callback: CallbackQuery, session: AsyncSession):
    submission_id = int(callback.data.split("_")[-1])
    submission_service = SubmissionService(session)
    submission = await submission_service.get_submission_with_user(submission_id)

    if submission.content is None:
        await callback.answer("–¢–µ–∫—Å—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    text = (
        f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è #{submission.id}\n"
        f"–û—Ç: {submission.user.media_outlet}\n"
        f"–ó–∞–¥–∞–Ω–∏–µ: #{submission.task_id}\n"
        f"–¢–µ–∫—Å—Ç:\n{submission.content}"
    )

    await callback.message.answer(
        text,
        reply_markup=await get_moderation_keyboard(submission.id, session)
    )
    await callback.answer()

@router.callback_query(F.data.startswith("send_link_"))
async def handle_send_link(callback: CallbackQuery, state: FSMContext):
    submission_id = int(callback.data.split("_")[-1])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(submission_id=submission_id)
    
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
    await state.set_state(TaskStates.waiting_for_link)
    
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑:")
    await callback.answer()

@router.message(TaskStates.waiting_for_link)
async def handle_link_submission(
    message: Message, 
    state: FSMContext, 
    session: AsyncSession,
    bot: Bot
):
    data = await state.get_data()
    submission_id = data['submission_id']
    
    submission_service = SubmissionService(session)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        submission = await submission_service.get_submission(submission_id)
        if not submission:
            await message.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.")
            await state.clear()
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        submission = await submission_service.add_published_link(submission_id, message.text)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏
        from src.config.users import ADMINS
        for admin in ADMINS:
            try:
                await bot.send_message(
                    admin["telegram_id"],
                    f"üîó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é #{submission.id}:\n{message.text}"
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin['username']} (ID: {admin['telegram_id']}): {e}")
        
        await message.answer("–°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await state.clear()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()

@router.callback_query(F.data.startswith("delete_task_"))
async def delete_task(
    callback: CallbackQuery, 
    session: AsyncSession,
    user: User
):
    if not await check_admin(user):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    task_id = int(callback.data.split("_")[-1])
    task_service = TaskService(session)
    
    try:
        # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        await task_service.delete_task_with_related_data(task_id)
        
        await callback.answer("–ó–∞–¥–∞–Ω–∏–µ –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã ‚úÖ")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–¥–∞–Ω–∏–µ–º
        await callback.message.delete()
        
    except Exception as e:
        logging.error(f"Error deleting task {task_id}: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è", show_alert=True)

@router.callback_query(F.data == "list_tasks_for_deletion")
async def list_tasks_for_deletion(
    callback: CallbackQuery, 
    session: AsyncSession,
    user: User
):
    if not await check_admin(user):
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", show_alert=True)
        return

    task_service = TaskService(session)
    tasks = await task_service.get_all_tasks()
    
    if not tasks:
        await callback.message.answer("–ù–µ—Ç –∑–∞–¥–∞–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        return
    
    for task in tasks:
        await callback.message.answer(
            f"–ó–∞–¥–∞–Ω–∏–µ #{task.id}\n"
            f"–ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑: {task.press_release_link}\n"
            f"–î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y %H:%M')}\n"
            f"–°—Ç–∞—Ç—É—Å: {task.status}",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(
                    text="‚ùå –£–¥–∞–ª–∏—Ç—å",
                    callback_data=f"delete_task_{task.id}"
                )
            ]])
        )
    
    await callback.answer()

async def get_moderation_keyboard(submission_id: int, session: AsyncSession) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
    submission_service = SubmissionService(session)
    submission = await submission_service.get_submission(submission_id)
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –û–¥–æ–±—Ä–∏—Ç—å", callback_data=f"approve_submission_{submission_id}"),
            InlineKeyboardButton(
                text="üìù –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", 
                callback_data=f"revise_{submission_id}",
                disabled=submission.status == "approved"
            )
        ]
    ])

def get_admin_main_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="create_task"),
            InlineKeyboardButton(text="–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—É–±–ª–∏–∫–∞—Ü–∏–π", callback_data="review_posts")
        ],
        [
            InlineKeyboardButton(text="–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á—ë—Ç–æ–≤", callback_data="export_reports"),
            InlineKeyboardButton(text="–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="list_tasks_for_deletion")  # –ò–∑–º–µ–Ω–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
        ]
    ])

async def notify_media_about_new_task(
    bot: Bot, 
    task: Task, 
    media_users: List[User]
):
    for user in media_users:
        try:
            if task.photo:
                await bot.send_photo(
                    chat_id=user.telegram_id,
                    photo=task.photo,
                    caption=(
                        f"üì£ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ #{task.id}\n"
                        f"–ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑: {task.press_release_link}\n"
                        f"–î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y %H:%M')}"
                    ),
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(
                            text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                            callback_data=f"take_task_{task.id}"
                        )
                    ]])
                )
            else:
                await bot.send_message(
                    chat_id=user.telegram_id,
                    text=(
                        f"üì£ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ #{task.id}\n"
                        f"–ü—Ä–µ—Å—Å-—Ä–µ–ª–∏–∑: {task.press_release_link}\n"
                        f"–î–µ–¥–ª–∞–π–Ω: {task.deadline.strftime('%d.%m.%Y %H:%M')}"
                    ),
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                        InlineKeyboardButton(
                            text="–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É",
                            callback_data=f"take_task_{task.id}"
                        )
                    ]])
                )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username} (ID: {user.telegram_id}): {e}")

@router.message(AdminStates.waiting_for_task_photo)
async def handle_task_photo(
    message: Message, 
    state: FSMContext, 
    session: AsyncSession,
    user: User
):
    try:
        if not message.photo:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ –∫ –∑–∞–¥–∞–Ω–∏—é.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        press_release_link = data['press_release_link']
        deadline = data['deadline']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
        photo = message.photo[-1].file_id
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
        task_service = TaskService(session)
        task = await task_service.create_task(
            press_release_link=press_release_link,
            deadline=deadline,
            created_by=user.id,
            photo=photo
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –°–ú–ò
        media_users = await task_service.get_media_users()
        await notify_media_about_new_task(message.bot, task, media_users)
        
        await message.answer(
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ #{task.id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ",
            reply_markup=get_admin_main_keyboard()
        )
        await state.clear()
        
    except Exception as e:
        logging.error(f"Error in handle_task_photo: {e}", exc_info=True)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è",
            reply_markup=get_admin_main_keyboard()
        )
        await state.clear()